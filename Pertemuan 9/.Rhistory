title = "Clustering Gapminder Data (2004)",
x = "Fertility",
y = "Life Expectancy"
) + theme_minimal()
ggplot(
gapminder_2004,
aes(
x = gdp,
y = life_expectancy,
color = cluster
)
) + geom_point(
size = 3
) + labs(
title = "Clustering Gapminder Data (2004)",
x = "GDP",
y = "Life Expectancy"
) + theme_minimal() + scale_x_log10()
set.seed(123)
kmeans_result = kmeans(gapminder_2004_scaled,
center = 4,
nstart = 10)
gapminder_2004$cluster = as.factor(kmeans_result$cluster)
ggplot(
gapminder_2004,
aes(
x = gdp,
y = life_expectancy,
color = cluster
)
) + geom_point(
size = 3
) + labs(
title = "Clustering Gapminder Data (2004)",
x = "GDP",
y = "Life Expectancy"
) + theme_minimal() + scale_x_log10()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidymodels)
library(here)
knitr::opts_chunk$set(echo = TRUE)
path = here('data-raw', 'un_smp.csv')
un_smp = vroom(path)
library(tidyverse)
library(dslabs)
library(tidymodels) #
library(vroom)
library(here)
path = here('data-raw', 'un_smp.csv')
un_smp = vroom(path)
library(tidyverse)
library(dslabs)
library(tidymodels)
library(vroom)
library(here)
path = here('data-raw', 'un_smp.csv')
un_smp = vroom(path)
library(tidyverse)
library(dslabs)
library(tidymodels)
library(vroom)
library(here)
path = here('data-raw', 'un_smp.csv')
un_smp = vroom(path)
path = here('data-raw', 'un_smp.csv')
un_smp = vroom(path)
path = here('data-raw', 'un_smp.csv')
un_smp = vroom(path)
path = here('data-raw', 'un_smp.csv')
un_smp = vroom(path)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidymodels)
library(here)
# airquality1.csv
path = here('data-raw','airquality1.csv')
head(path)
# airquality1.csv
path = here('data-raw','airquality1.csv')
View(path)
# airquality1.csv
path = here('data-raw','airquality1.csv')
airquality1.csv = vroom(path)
# airquality1.csv
path = here('data-raw','airquality1.csv')
airquality1 = read.csv(path)
head(airquality1, 10)
# airquality2.csv
path = here('data-raw','airquality2.csv')
airquality2 = read.csv(path)
head(airquality2, 10)
View(airquality1)
View(airquality2)
airquality1$Ozone[is.na(airquality1$Ozone)] = mean(airquality1$Ozone, na.rm = TRUE)
airquality1$Solar.R[is.na(airquality1$Solar.R)] = mean(airquality1$Ozone, na.rm = TRUE)
head(airquality1, 10)
airquality1$Ozone[is.na(airquality1$Ozone)] = mean(airquality1$Ozone, na.rm = TRUE)
airquality1$Solar.R[is.na(airquality1$Solar.R)] = mean(airquality1$Ozone, na.rm = TRUE)
head(airquality1, 10)
data(airquality1)
data(airquality2)
airquality = left_join(airquality1, airquality2, by = 'X')
tail(airquality, 6)
airquality %>% mutate(Date = as.POSIXct(paste("1973", Month, Day, sep =  "-"), format = "%Y-%m-%d"))
airquality %>% mutate(Date = as.POSIXct(paste("1973", Month, Day, sep =  "-"), format = "%Y-%m-%d"))
View(airquality)
airquality = airquality %>% mutate(Date = as.POSIXct(paste("1973", Month, Day, sep =  "-"), format = "%Y-%m-%d"))
View(airquality)
airquality = airquality %>% select(-X, -Day, -Month) %>% rename(Solar_Radiation = Solar.R)
airquality = airquality %>% select(-X, -Day, -Month) %>% rename(Solar_Radiation = Solar.R)
airquality = airquality %>% select(-X, -Day, -Month) %>% rename(Solar_Radiation = Solar.R)
airquality = airquality %>% mutate(Date = as.POSIXct(paste("1973", Month, Day, sep =  "-"), format = "%Y-%m-%d"))
data(airquality1)
data(airquality2)
airquality = left_join(airquality1, airquality2, by = 'X')
tail(airquality, 6)
airquality = airquality %>% mutate(Date = as.POSIXct(paste("1973", Month, Day, sep =  "-"), format = "%Y-%m-%d"))
airquality = airquality %>% select(-X, -Day, -Month) %>% rename(Solar_Radiation = Solar.R)
head(airquality)
ggplot(
airquality,
aes(
x = Date,
y = Ozone
)
) + geom_line(color = "blue", size = 1) +
geom_point(color = "red", size = 2) +
labs(title = "Daily Ozone Levels Over Time",
x = "Date",
y = "Ozone Level") +
theme_minimal()
ggplot(
airquality,
aes(
x = Date,
y = Ozone
)
) + geom_line(color = "blue", size = 1) +
geom_point(color = "red", size = 2) +
labs(title = "Kualitas Ozone Setiap Hari",
x = "Date",
y = "Ozone Level") +
theme_minimal()
ggplot(
airquality,
aes(
x = Date,
y = Ozone
)
) + geom_line(color = "blue", size = 2) +
geom_point(color = "red", size = 2) +
labs(title = "Kualitas Ozone Setiap Hari",
x = "Date",
y = "Ozone Level") +
theme_minimal()
ggplot(
airquality,
aes(
x = Date,
y = Ozone
)
) + geom_line(color = "blue", size = 1) +
geom_point(color = "red", size = 2) +
labs(title = "Kualitas Ozone Setiap Hari",
x = "Date",
y = "Ozone Level") +
theme_minimal()
ggplot(
airquality,
aes(
x = Date,
y = Ozone
)
) + geom_line(color = "blue", size = 1) +
geom_point(color = "red", size = 1) +
labs(title = "Kualitas Ozone Setiap Hari",
x = "Date",
y = "Ozone Level") +
theme_minimal()
ggplot(
airquality,
aes(
x = Date,
y = Ozone
)
) + geom_line(color = "blue", size = 1) +
geom_point(color = "red", size = 1.5) +
labs(title = "Kualitas Ozone Setiap Hari",
x = "Date",
y = "Ozone Level") +
theme_minimal()
ggplot(
airquality,
aes(
x = Date,
y = Ozone
)
) + geom_line(color = "blue", size = 1) +
geom_point(color = "red", size = 1) +
labs(title = "Kualitas Ozone Setiap Hari",
x = "Date",
y = "Ozone Level") +
theme_minimal()
ggplot(
airquality,
aes(
x = Date,
y = Ozone
)
) + geom_line(color = "blue", size = 1) +
geom_point(color = "red", size = 1) +
labs(
title = "Kualitas Ozone Setiap Hari",
x = "Date",
y = "Ozone Level"
) + theme_minimal()
airquality_scaled = airquality %>%
mutate(across(where(is.numeric), ~ (. - min(.)) / (max(.) - min(.))))
head(airquality_scaled)
airquality_scaled = airquality %>%
select(-Date) %>%
scale()
head(airquality_scaled)
set.seed(123)
airquality_split = airquality %>%
initial_split(prop = 0.8)
airquality_split
airquality_recipe = training(airquality_split) %>%
recipe() %>%
update_role(
Ozone,
Solar_Radiation,
Wind,
new_role = "predictor"
) %>%
update_role(
Temp,
new_role = "outcome"
) %>%
update_role(
Date,
new_role = "ID"
)
airquality_recipe
# airquality_training
airquality_training = airquality_recipe %>%
prep() %>%
bake(
training(airquality_split)
)
# airquality_testing
airquality_testing = airquality_recipe %>%
prep() %>%
bake(
testing(airquality_split)
)
airquality_lm = linear_reg(mode = "regression") %>%
set_engine("lm") %>%
fit(
Temp ~ . -X,
data = airquality_training
)
airquality_lm = linear_reg(mode = "regression") %>%
set_engine("lm") %>%
fit(
Temp ~ . -Date,
data = airquality_training
)
airquality_lm
airquality_lm %>%
predict(airquality_testing) %>%
bind_cols(airquality_testing) %>%
metrics(
truth = Temp,
estimate = .pred
)
airquality_lm %>%
predict(airquality_testing) %>%
bind_cols(airquality_testing)
library(tidyverse)
library(tidymodels)
library(here)
# airquality1.csv
path = here('data-raw','airquality1.csv')
airquality1 = read.csv(path)
head(airquality1, 10)
# airquality2.csv
path = here('data-raw','airquality2.csv')
airquality2 = read.csv(path)
head(airquality2, 10)
airquality1$Ozone[is.na(airquality1$Ozone)] = mean(airquality1$Ozone, na.rm = TRUE)
airquality1$Solar.R[is.na(airquality1$Solar.R)] = mean(airquality1$Ozone, na.rm = TRUE)
head(airquality1, 10)
data(airquality1)
data(airquality2)
airquality = left_join(airquality1, airquality2, by = 'X')
tail(airquality, 6)
airquality = airquality %>% mutate(Date = as.POSIXct(paste("1973", Month, Day, sep =  "-"), format = "%Y-%m-%d"))
airquality = airquality %>% select(-X, -Day, -Month) %>% rename(Solar_Radiation = Solar.R)
head(airquality)
ggplot(
airquality,
aes(
x = Date,
y = Ozone
)
) + geom_line(color = "blue", size = 1) +
geom_point(color = "red", size = 1) +
labs(
title = "Kualitas Ozone Setiap Hari",
x = "Date",
y = "Ozone Level"
) + theme_minimal()
airquality_scaled = airquality %>%
select(-Date) %>%
scale()
head(airquality_scaled)
set.seed(123)
airquality_split = airquality %>%
initial_split(prop = 0.8)
airquality_split
airquality_recipe = training(airquality_split) %>%
recipe() %>%
update_role(
Ozone,
Solar_Radiation,
Wind,
new_role = "predictor"
) %>%
update_role(
Temp,
new_role = "outcome"
) %>%
update_role(
Date,
new_role = "ID"
)
airquality_recipe
# airquality_training
airquality_training = airquality_recipe %>%
prep() %>%
bake(
training(airquality_split)
)
# airquality_testing
airquality_testing = airquality_recipe %>%
prep() %>%
bake(
testing(airquality_split)
)
airquality_lm = linear_reg(mode = "regression") %>%
set_engine("lm") %>%
fit(
Temp ~ . -Date,
data = airquality_training
)
airquality_lm
airquality_lm %>%
predict(airquality_testing) %>%
bind_cols(airquality_testing)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidymodels)
library(nnet) # Model multinomial logistic regression
library(shiny) # Aplikasi
library(bslib)
library(datasets) # Dataset iris
data(iris)
# View(iris)
kelas = levels(iris$Species)
kelas
set.seed(420)
split = initial_split(iris, prop = 0.8, strata = Species)
iris_train = split %>% training()
iris_test = split %>% testing()
iris_train %>% select(Species) %>% group_by(Species) %>% summary(freq=n())
iris_test %>% select(Species) %>% group_by(Species) %>% summary(freq=n())
hasil_model = multinom(
Species ~ .,
data = iris_train
)
summary(hasil_model)
# type = "probs", outputnya berupa probabilitas tiap kelas
hasil_prediksi_probs = predict(hasil_model, newdata = iris_test, type = "probs")
hasil_prediksi_probs = round(hasil_prediksi_probs * 100 , digits = 2)
hasil_prediksi_probs
# type = "class", outputnya berupa kelas
hasil_prediksi_class = predict(hasil_model, newdata = iris_test, type = "class")
hasil_prediksi_class
table(
predicted_class = hasil_prediksi_class,
actual_class = iris_test$Species
)
akurasi = (10 + 8 + 10) / (10 + 8 + 2 + 10) * 100
akurasi
data_frame = data.frame(
predicted_class = hasil_prediksi_class,
actual_class = iris_test$Species
)
nrow(data_frame %>% filter(predicted_class == actual_class)) / nrow(data_frame) * 100
ui = fluidPage(
# Tambahkan CSS untuk tata letak tengah
tags$style(HTML("
.center {
display: flex;
flex-direction: column;
align-items: center;
justify-content: center;
height: 100vh;
}
table {
margin-top: 20px;
border-collapse: collapse;
}
")),
# Wrapper div untuk elemen di tengah
div(
class = "center",
# Judul utama
titlePanel("Dataset Iris"),
# Dropdown untuk memilih spesies
selectInput(
inputId = "species",
label = "Pilih Jenis Spesies : ",
choices = kelas
),
# Output tabel
tableOutput(outputId = "table_iris"),
# Jarak tambahan
tags$br(),
# Judul kedua
titlePanel("Uji Coba"),
# Layout untuk input kolom
layout_columns(
numericInput(
inputId = "sl",
label = "Sepal Length",
value = 1
),
numericInput(
inputId = "sw",
label = "Sepal Width",
value = 1
),
numericInput(
inputId = "pl",
label = "Petal Length",
value = 1
),
numericInput(
inputId = "pw",
label = "Petal Width",
value = 1
)
),
# Tombol klasifikasi
actionButton(
inputId = "klasifikasi",
label = "Klasifikasi"
),
# Jarak tambahan
tags$br(),
tags$br(),
# Output hasil klasifikasi
textOutput(outputId = "hasil_klasifikasi"),
# Jarak tambahan
tags$br()
)
)
server = function(input, output){
output$table_iris = renderTable(
head(
iris %>%
filter(
Species == input$species
),
10
)
)
output$hasil_klasifikasi = renderText({
input_prediksi = data.frame(
Sepal.Length = input$sl,
Sepal.Width = input$sw,
Petal.Length = input$pl,
Petal.Width = input$pw
)
hasil_class = predict(
hasil_model,
newdata = input_prediksi,
type = "class"
)
nama_kelas = kelas[hasil_class]
hasil_probs = predict(
hasil_model,
newdata = input_prediksi,
type = "probs"
)
persentase = round(
max(hasil_probs) * 100,
digits = 2
)
paste(
nama_kelas,
" (",
persentase,
"%)",
sep = ""
)
})|> bindEvent(input$klasifikasi)
}
shinyApp(ui,server)
